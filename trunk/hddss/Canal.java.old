/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import java.lang.reflect.Method;
/**
 *
 * @author allan
 */
public abstract class Canal {
    
    Agente p_i, p_j;
    int ultimaEntrega;
    boolean contention;
    Canal() {
    }
    public final void inicializaCanal(Agente x, Agente y) {
        p_i = x ;
        p_j = y;
        ultimaEntrega = 0;
        contention = false;
    }

    public void setContention(String dt) {
        contention = Boolean.parseBoolean(dt);
    }

    public final void entregaMensagem(Mensagem m) {
        if ( this.status() ) {
            int at = atraso();
            int proxEntrega =p_j.clock+at;
            
            if (!contention) {

                     /*  Sem contenção
                     */
                    if (proxEntrega < ultimaEntrega)
                        proxEntrega = ultimaEntrega+1;
            }
            else {
             /*  Contenção
             */ 
                    proxEntrega = maximo(ultimaEntrega,p_j.clock)+at;
            };

            p_j.debug("p"+p_j.id+" entrega = "+proxEntrega);
            p_j.Recepcao.adiciona(proxEntrega, m);
            ultimaEntrega=proxEntrega;
        }
    }
    
    int maximo (int a, int b) {
        return a>b?a:b;
    }

    public final void definePropriedade(String propriedade, String valor) {
        try {
            String stringNomeMetodoNome = "set"+propriedade;
            Class classeGenerica = this.getClass();
            Class partypes[] = new Class[1];
            partypes[0] = String.class;
            Method metodoNome = classeGenerica.getMethod(stringNomeMetodoNome, partypes );
            metodoNome.invoke(this, valor);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    abstract int atraso();
    
    abstract boolean status(); 
            
}
